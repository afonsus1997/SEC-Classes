$date
	Mon Oct 14 16:51:07 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module xtop_tb $end
$var wire 32 ! r0 [31:0] $end
$var wire 32 " r1 [31:0] $end
$var wire 32 # r10 [31:0] $end
$var wire 32 $ r11 [31:0] $end
$var wire 32 % r12 [31:0] $end
$var wire 32 & r13 [31:0] $end
$var wire 32 ' r14 [31:0] $end
$var wire 32 ( r15 [31:0] $end
$var wire 32 ) r2 [31:0] $end
$var wire 32 * r3 [31:0] $end
$var wire 32 + r4 [31:0] $end
$var wire 32 , r5 [31:0] $end
$var wire 32 - r6 [31:0] $end
$var wire 32 . r7 [31:0] $end
$var wire 32 / r8 [31:0] $end
$var wire 32 0 r9 [31:0] $end
$var wire 1 1 trap $end
$var wire 1 2 par_we $end
$var wire 32 3 par_out [31:0] $end
$var wire 14 4 par_addr [13:0] $end
$var reg 1 5 clk $end
$var reg 32 6 par_in [31:0] $end
$var reg 1 7 rst $end
$var integer 32 8 k [31:0] $end
$var integer 32 9 start_time [31:0] $end
$scope module uut $end
$var wire 1 5 clk $end
$var wire 32 : ext_data_to_rd [31:0] $end
$var wire 32 ; par_in [31:0] $end
$var wire 32 < par_out [31:0] $end
$var wire 1 = par_re $end
$var wire 1 2 par_we $end
$var wire 1 7 rst $end
$var wire 1 1 trap $end
$var wire 1 > regf_sel $end
$var wire 32 ? regf_data_to_rd [31:0] $end
$var wire 14 @ pc [13:0] $end
$var wire 14 A par_addr [13:0] $end
$var wire 1 B mem_sel $end
$var wire 32 C mem_data_to_rd [31:0] $end
$var wire 1 D led_sel $end
$var wire 1 E led $end
$var wire 32 F instruction [31:0] $end
$var wire 1 G ext_sel $end
$var wire 1 H data_we $end
$var wire 32 I data_to_wr [31:0] $end
$var wire 32 J data_to_rd [31:0] $end
$var wire 1 K data_sel $end
$var wire 15 L data_addr [14:0] $end
$var wire 1 M cprt_sel $end
$scope module addr_decoder $end
$var wire 32 N ext_data_to_rd [31:0] $end
$var wire 1 K sel $end
$var wire 32 O regf_data_to_rd [31:0] $end
$var wire 32 P mem_data_to_rd [31:0] $end
$var wire 15 Q addr [14:0] $end
$var reg 1 M cprt_sel $end
$var reg 32 R data_to_rd [31:0] $end
$var reg 1 G ext_sel $end
$var reg 1 D led_sel $end
$var reg 1 B mem_sel $end
$var reg 1 > regf_sel $end
$var reg 1 1 trap_sel $end
$upscope $end
$scope module controller $end
$var wire 1 S alu_arith_ops $end
$var wire 1 T alu_imm_ops $end
$var wire 1 U alu_logic_ops $end
$var wire 1 V alu_mem_ops $end
$var wire 1 W alu_ops $end
$var wire 32 X and_res [31:0] $end
$var wire 1 Y branch_ops $end
$var wire 1 5 clk $end
$var wire 1 Z imm_ops $end
$var wire 1 [ load_imm_ops $end
$var wire 1 \ load_mem_ops $end
$var wire 1 ] load_ops $end
$var wire 32 ^ mem_data_from [31:0] $end
$var wire 32 _ mem_data_to [31:0] $end
$var wire 1 K mem_sel $end
$var wire 1 H mem_we $end
$var wire 1 7 rst $end
$var wire 1 ` store_mem_ops $end
$var wire 32 a xor_res [31:0] $end
$var wire 32 b operand [31:0] $end
$var wire 4 c opcode [3:0] $end
$var wire 32 d instruction [31:0] $end
$var wire 32 e imm [31:0] $end
$var wire 1 f carry_n_1 $end
$var wire 1 g carry_n $end
$var wire 33 h adder_res_2 [32:0] $end
$var wire 32 i adder_res_1 [31:0] $end
$var reg 1 j alu_carry $end
$var reg 1 k alu_negative $end
$var reg 1 l alu_overflow $end
$var reg 33 m alu_result [32:0] $end
$var reg 15 n mem_addr [14:0] $end
$var reg 32 o operand_int [31:0] $end
$var reg 14 p pc [13:0] $end
$var reg 32 q regA [31:0] $end
$var reg 32 r regB [31:0] $end
$var reg 32 s regC [31:0] $end
$upscope $end
$scope module cprint $end
$var wire 1 5 clk $end
$var wire 8 t data_in [7:0] $end
$var wire 1 u sel $end
$upscope $end
$scope module ledcontroller $end
$var wire 1 5 clk $end
$var wire 1 v data_in $end
$var wire 1 7 rst $end
$var wire 1 D sel $end
$var reg 1 E data_out $end
$upscope $end
$scope module ram $end
$var wire 1 5 clk $end
$var wire 14 w data_addr [13:0] $end
$var wire 14 x data_addr_int [13:0] $end
$var wire 1 y data_en_int $end
$var wire 32 z data_in [31:0] $end
$var wire 32 { data_in_int [31:0] $end
$var wire 32 | data_out [31:0] $end
$var wire 1 B data_sel $end
$var wire 1 H data_we $end
$var wire 1 } data_we_int $end
$var wire 1 ~ instr_en $end
$var wire 14 !" pc [13:0] $end
$var reg 32 "" data_out_int [31:0] $end
$var reg 32 #" instruction [31:0] $end
$upscope $end
$scope module regf $end
$var wire 4 $" addr [3:0] $end
$var wire 1 5 clk $end
$var wire 32 %" data_in [31:0] $end
$var wire 1 > sel $end
$var wire 1 H we $end
$var wire 32 &" data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
1~
x}
bx |
bx {
bx z
xy
bx x
bx w
xv
xu
bx t
bx s
bx r
bx q
bx p
b0 o
bx n
b0 m
0l
0k
0j
bx i
bx h
xg
xf
bx e
bx d
bx c
b0 b
bx a
x`
bx _
b0 ^
x]
x\
x[
xZ
xY
b0 X
xW
xV
xU
xT
xS
b0 R
bx Q
bx P
bx O
b0 N
xM
bx L
xK
b0 J
bx I
xH
xG
bx F
xE
xD
bx C
xB
bx A
bx @
bx ?
x>
x=
bx <
b0 ;
b0 :
bx 9
bx 8
07
b0 6
15
bx 4
bx 3
x2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5000
05
#10000
15
#11000
0f
b0 i
0g
b0 a
b0 t
0v
0E
b0 @
b0 p
b0 !"
b0 h
b0 {
b0 3
b0 <
b0 I
b0 _
b0 z
b0 %"
b0 q
b0 r
b0 s
17
#15000
05
#20000
b1 i
b1 a
0K
0=
b0 ?
b0 O
b0 &"
b1 h
b1 b
b1 $"
b1 x
b1 w
b1 4
b1 A
0D
01
0G
0M
0>
0y
0B
b1 o
b1 L
b1 Q
b1 n
0V
0W
0u
02
1]
1Z
b1 e
0Y
0U
0S
0T
0}
0H
0`
0\
1[
b110 c
b1100000000000000000000000000001 F
b1100000000000000000000000000001 d
b1100000000000000000000000000001 #"
15
#21000
b10000 8
b10101 9
07
#25000
05
#30000
b10 i
b0 a
b1 X
b1 t
1v
b1 @
b1 p
b1 !"
b10 h
b1 {
b1 3
b1 <
b1 I
b1 _
b1 z
b1 %"
b1 q
15
#35000
05
#40000
xf
xk
xg
bx J
bx R
bx ^
bx ?
bx O
bx &"
1>
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx m
1K
bx i
bx a
b0x X
bx h
bx b
1W
bx o
b100000000000001 L
b100000000000001 Q
b100000000000001 n
1V
0]
0Z
b100000000000001 e
1U
0[
b101 c
b10 @
b10 p
b10 !"
b1010000000000000100000000000001 F
b1010000000000000100000000000001 d
b1010000000000000100000000000001 #"
15
#45000
05
#50000
b0 b
0W
0V
0U
1}
1H
1`
0k
b0 m
b0 X
bx t
xv
b0 o
b1001 c
b11 @
b11 p
b11 !"
bx {
bx 3
bx <
bx I
bx _
bx z
bx %"
bx q
b0x00 s
b10010000000000000100000000000001 F
b10010000000000000100000000000001 d
b10010000000000000100000000000001 #"
15
#55000
05
#60000
b0 J
b0 R
b0 ^
b0 ?
b0 O
b0 &"
b0 $"
b10000000000000 x
b10000000000000 w
b10000000000000 4
b10000000000000 A
1D
0>
b110000000000000 L
b110000000000000 Q
b110000000000000 n
b110000000000000 e
b100 @
b100 p
b100 !"
b10010000000000000110000000000000 F
b10010000000000000110000000000000 d
b10010000000000000110000000000000 #"
15
#65000
05
#70000
0K
b0x X
b0 J
b0 R
b0 ^
b1 b
b1 $"
b1 x
b1 w
b1 4
b1 A
0y
0B
0D
b1 o
b1 L
b1 Q
b1 n
1]
1Z
b1 e
0}
0H
0`
1[
b110 c
xE
b101 @
b101 p
b101 !"
b1100000000000000000000000000001 F
b1100000000000000000000000000001 d
b1100000000000000000000000000001 #"
15
#75000
05
#80000
xk
bx J
bx R
bx ^
bx ?
bx O
bx &"
1>
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx m
1K
bx b
1W
bx o
b100000000000001 L
b100000000000001 Q
b100000000000001 n
1V
0]
0Z
xf
b100000000000001 e
1U
0[
bx i
xg
bx a
b0x X
b1 t
1v
b101 c
bx h
b1 {
b1 3
b1 <
b1 I
b1 _
b1 z
b1 %"
b1 q
b110 @
b110 p
b110 !"
b1010000000000000100000000000001 F
b1010000000000000100000000000001 d
b1010000000000000100000000000001 #"
15
#85000
05
#90000
b0 b
b0 o
0W
0V
0U
1}
1H
1`
0k
b0 m
b0 X
bx t
xv
b1001 c
b111 @
b111 p
b111 !"
bx {
bx 3
bx <
bx I
bx _
bx z
bx %"
bx q
b10010000000000000100000000000001 F
b10010000000000000100000000000001 d
b10010000000000000100000000000001 #"
15
#95000
05
#100000
b0 J
b0 R
b0 ^
b0 ?
b0 O
b0 &"
b0 $"
b10000000000000 x
b10000000000000 w
b10000000000000 4
b10000000000000 A
1D
0>
b110000000000000 L
b110000000000000 Q
b110000000000000 n
b110000000000000 e
b1000 @
b1000 p
b1000 !"
b10010000000000000110000000000000 F
b10010000000000000110000000000000 d
b10010000000000000110000000000000 #"
15
#105000
05
#110000
b1111 $"
b11111111111111 x
b11111111111111 w
b11111111111111 4
b11111111111111 A
11
0D
b111111111111111 L
b111111111111111 Q
b111111111111111 n
b111111111111111 e
b1001 @
b1001 p
b1001 !"
b10010000000000000111111111111111 F
b10010000000000000111111111111111 d
b10010000000000000111111111111111 #"
15
#115000
05
#120000
0K
b0 J
b0 R
b0 ^
b0 $"
b0 x
b0 w
b0 4
b0 A
0y
0B
01
xk
xl
xj
bx m
1W
b0 L
b0 Q
b0 n
1S
1Z
b0 e
1T
0}
0H
0`
b0 c
b1010 @
b1010 p
b1010 !"
b0 F
b0 d
b0 #"
15
